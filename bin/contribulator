#!/usr/bin/env ruby
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')
require 'rubygems'
require 'gli'
require 'digest'
require 'contribulator_version'

include GLI

program_desc 'Publish changes from one repo to another'

version Contribulator.version

desc "Publish a repo's master branch to another repo with force"
command :publish do |c|
  c.desc "Resetup the repositories locally before publishing"
  c.switch :fresh

  c.action do |global_options, options, args|
    exit_now! 'you must provide the source repo as the first argument', 0 if args.empty?

    source_repo = args[0]
    destination_repo = if args[1]
      args[1]
    else
      stripped_source_repo = source_repo[-4..-1] == '.git' ? source_repo[0..-5] : source_repo
      "#{stripped_source_repo}_contrib"
    end
    tmp_dir = File.expand_path("../../tmp/#{Digest::SHA256.hexdigest("#{source_repo}_#{destination_repo}")[0..10]}", __FILE__)


    if options[:fresh]
      puts "Removing the local clones for this publication\n\n"
      FileUtils.rm_r(tmp_dir)
    end

    fetch_and_push_command = %(
git fetch &&
git push contrib origin/master:master &&
git push contrib --tags
    )

    if(File.exists?(tmp_dir))
      puts "Repos already setup to fetch and push"
      setup_command = "cd #{tmp_dir} &&"
      command = setup_command + fetch_and_push_command
    else
      puts "Setting up repos to fetch and push"
      setup_command = %(
mkdir -p #{tmp_dir} &&
cd #{tmp_dir} &&
git init . && 
git remote add origin #{source_repo} && 
git remote add contrib #{destination_repo} &&
      )
      command = setup_command + fetch_and_push_command        
    end

    puts %(
Executing command:
------------------------------------------

#{command}
------------------------------------------)

    puts %(
Output of the command:      
------------------------------------------

)
    puts `#{command}`
    puts %(------------------------------------------

Command Finished.
    )
  end
end

exit GLI.run(ARGV)
